#!ansible-playbook
---
- name: Ensure the cluster is ready with required deployments
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - defaults/main.yml

  pre_tasks:
    - name: Install required collections
      ansible.builtin.command: ansible-galaxy collection install kubernetes.core
      changed_when: false

  tasks:
    - name: Wait for Namespaces to be ready
      kubernetes.core.k8s_info:
        kind: Namespace
        name: "{{ namespace.name }}"
        api_version: v1
      register: ns_status
      until: ns_status.resources[0].status.phase is defined and ns_status.resources[0].status.phase == "Active"
      loop: "{{ namespace_list }}"
      loop_control:
        label: "{{ namespace.name }}"
        loop_var: "namespace"
      retries: 30
      delay: 10
      tags:
        - bootstrap
      when: "namespace.tags | intersect(ansible_run_tags) or not ansible_run_tags"
      vars:
        namespace_list:
          - name: localstack
            tags: ["bootstrap"]
          - name: polaris
            tags: ["bootstrap"]

    - name: Wait for Deployments to be ready
      kubernetes.core.k8s_info:
        kind: "{{ deployment.kind }}"
        name: "{{ deployment.name }}"
        namespace: "{{ deployment.namespace }}"
        api_version: "{{ deployment.api_version | default('apps/v1') }}"
      register: resource_status
      until: resource_status.resources[0].status.availableReplicas is defined and
        resource_status.resources[0].status.availableReplicas > 0 and
        resource_status.resources[0].status.readyReplicas is defined and
        resource_status.resources[0].status.readyReplicas == resource_status.resources[0].status.replicas
      loop: "{{ deployments_resources_list }}"
      loop_control:
        label: "{{ deployment.namespace }}/{{ deployment.kind }}/{{ deployment.name }}"
        loop_var: "deployment"
      retries: 60
      delay: 10
      tags:
        - bootstrap
        - polaris
      when: "deployment.tags | intersect(ansible_run_tags) or not ansible_run_tags"
      vars:
        deployments_resources_list:
          - name: localstack
            namespace: localstack
            kind: Deployment
            tags:
              - bootstrap
          - name: postgresql
            namespace: polaris
            kind: StatefulSet
            tags:
              - bootstrap
          - name: polaris
            namespace: polaris
            kind: Deployment
            tags:
              - polaris

    - name: Wait for Jobs to reach desired state
      kubernetes.core.k8s_info:
        kind: Job
        name: "{{ job.name }}"
        namespace: "{{ job.namespace }}"
        api_version: batch/v1
      register: job_status
      until: >
        (job.type == 'completion' and job_status.resources[0].status.succeeded is defined and job_status.resources[0].status.succeeded > 0) or
        (job.type == 'suspension' and job_status.resources[0].spec.suspend is defined and job_status.resources[0].spec.suspend == true)
      retries: 60
      delay: 10
      loop: "{{ job_resources_list }}"
      loop_control:
        loop_var: "job"
        label: "{{ job.name }}"
      tags:
        - polaris
      when: "job.tags | intersect(ansible_run_tags) or not ansible_run_tags"
      vars:
        job_resources_list:
          - name: polaris-bootstrap
            namespace: polaris
            type: completion
            tags:
              - polaris
          - name: polaris-purge
            namespace: polaris
            type: suspension
            tags:
              - polaris
