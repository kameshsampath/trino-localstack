#!ansible-playbook
---
# Clean up all Catalog and related resources
- name: Clean up Demo Catalog and resources
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - defaults/main.yml

  vars:
    plf_default_headers:
      Authorization: "Bearer {{ plf_access_token }}"
      content-type: application/json
      Polaris-Realm: "{{ plf_realm }}"

    plf_api_endpoints:
      - endpoint: "/api/management/v1/principal-roles/{{ plf_admin_role }}"
        tags:
          - cleanup

      - endpoint: "/api/management/v1/principals/{{ plf_admin_username }}/principal-roles/{{ plf_admin_role }}"
        tags:
          - cleanup

      - endpoint: "/api/management/v1/catalogs/{{ plf_catalog_name }}/catalog-roles/{{ plf_catalog_role }}"
        tags:
          - cleanup

      - endpoint: "/api/management/v1/principal-roles/{{ plf_admin_role }}/catalog-roles/{{ plf_catalog_name }}/{{
          plf_catalog_role }}"
        tags:
          - cleanup

      - endpoint: "/api/management/v1/catalogs/{{ plf_catalog_name }}"
        tags:
          - cleanup

      - endpoint: "/api/management/v1/principals/{{ plf_admin_username }}"
        tags:
          - cleanup

  tasks:
    - name: Ensure work directory exists
      ansible.builtin.file:
        path: "{{ plf_work_dir }}"
        state: directory
        mode: "0755"
      tags:
        - cleanup

    - name: Parse credential file and set auth variables
      ansible.builtin.set_fact:
        plf_credential:
          "{{ lookup('ansible.builtin.ini', 'credential', type='properties', file=plf_credentials_file).split(',') |
          list }}"
        plf_realm: "{{ lookup('ansible.builtin.ini', 'credential', type='properties', file=plf_credentials_file).split(',')[0] }}"
        plf_client_id: "{{ lookup('ansible.builtin.ini', 'credential', type='properties', file=plf_credentials_file).split(',')[1] }}"
        plf_client_secret: "{{ lookup('ansible.builtin.ini', 'credential', type='properties', file=plf_credentials_file).split(',')[2] }}"
      tags:
        - token

    - name: Get access token
      ansible.builtin.uri:
        url: "{{ plf_api_base_url }}/api/catalog/v1/oauth/tokens"
        method: POST
        headers:
          Authorization: "Bearer {{ plf_client_id }}:{{ plf_client_secret }}"
          accept: application/json
          content-type: application/x-www-form-urlencoded
          Polaris-Realm: "{{ plf_realm }}"
        body_format: form-urlencoded
        body:
          grant_type: client_credentials
          client_id: "{{ plf_client_id }}"
          client_secret: "{{ plf_client_secret }}"
          scope: "PRINCIPAL_ROLE:ALL"
        status_code: [200]
      register: plf_token_response
      tags:
        - token

    - name: Set access token
      ansible.builtin.set_fact:
        plf_access_token: "{{ plf_token_response.json.access_token }}"
      tags:
        - token

    - name: Get Namespaces under Catalog
      ansible.builtin.uri:
        url: "{{ plf_api_base_url }}/api/catalog/v1/{{ plf_catalog_name }}/namespaces"
        method: GET
        headers: "{{ plf_default_headers }}"
        status_code: [200, 404]
      register: plf_catalog_namespaces_response
      tags:
        - cleanup

    - name: Set Namespaces fact
      ansible.builtin.set_fact:
        plf_namespaces: "{{ plf_catalog_namespaces_response.json.namespaces[0] | default([]) }}"
      tags:
        - cleanup

    - name: Drop Tables in Schema
      ansible.builtin.include_tasks: tasks/drop_tables.yml
      loop: "{{ plf_namespaces }}"
      loop_control:
        label: "{{ item }}"
      when: plf_namespaces and plf_namespaces | length > 0
      tags:
        - cleanup

    - name: Execute Polaris API deletion operations
      ansible.builtin.uri:
        url: "{{ plf_api_base_url }}{{ item.endpoint }}"
        method: "{{ item.method | default('DELETE') }}"
        headers: "{{ plf_default_headers }}"
        status_code: [204, 404]
      register: plf_api_result
      loop: "{{ plf_api_endpoints }}"
      loop_control:
        label: "{{ item.endpoint }}"
      tags:
        - cleanup
        - token
      when: "item.tags | intersect(ansible_run_tags) or not ansible_run_tags"

    - name: Delete s3 bucket
      amazon.aws.s3_bucket:
        name: "{{ plf_catalog_name }}"
        state: absent
        region: "{{ plf_aws_region }}"
        aws_endpoint_url: "{{ plf_aws_endpoint_url }}"
        force: true
        tags:
          Name: "Polaris Catalog"
      tags:
        - cleanup
        - s3
