---
- name: Prepare the environment for setting up polaris
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - defaults/main.yml

  vars:
    plf_key_files:
      - "{{ plf_polaris_dir }}/rsa_key"
      - "{{ plf_polaris_dir }}/rsa_key.pub"
    plf_config_files:
      - file: "{{ plf_polaris_dir }}/.bootstrap-credentials.env"
        template: "templates/bootstrap-credentials.env.j2"
      - file: "{{ plf_features_dir }}/postgresql.yaml"
        template: "templates/postgresql.yml.j2"
      - file: "{{ plf_polaris_dir }}/persistence.xml"
        template: "templates/persistence.xml.j2"
      - file: "{{ plf_polaris_dir }}/.polaris.env"
        template: "templates/polaris.env.j2"

  pre_tasks:
    - name: Install required collections
      ansible.builtin.command: ansible-galaxy collection install community.crypto
      changed_when: false

  tasks:
    - name: Ensure key directory exists with secure permissions
      ansible.builtin.file:
        path: "{{ plf_polaris_dir }}"
        state: directory
        mode: "0700"
      tags:
        - rsa
        - setup

    - name: Check if RSA keys already exist
      ansible.builtin.stat:
        path: "{{ plf_polaris_dir }}/rsa_key"
      register: private_key_stat
      tags:
        - rsa
        - setup

    - name: Generate RSA key pair
      when: not private_key_stat.stat.exists
      block:
        - name: Generate RSA private key
          community.crypto.openssl_privatekey:
            path: "{{ plf_polaris_dir }}/rsa_key"
            size: 4096
            type: RSA
            format: "pkcs8"
            mode: "0600"
          tags:
            - rsa
            - setup

        - name: Generate RSA public key
          community.crypto.openssl_publickey:
            path: "{{ plf_polaris_dir }}/rsa_key.pub"
            privatekey_path: "{{ plf_polaris_dir }}/rsa_key"
            mode: "0644"
          tags:
            - rsa
            - setup

    - name: Verify RSA keys exist
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ plf_key_files }}"
      register: key_stats
      tags:
        - rsa
        - verify

    - name: Fail if keys are missing
      ansible.builtin.fail:
        msg: "{{ item.item }} does not exist"
      when: not item.stat.exists
      loop: "{{ key_stats.results }}"
      loop_control:
        label: "{{ item.item }}"
      tags:
        - rsa
        - verify

    - name: Display key generation status
      ansible.builtin.debug:
        msg:
          - "RSA keys generated successfully"
          - "Private key location: {{ plf_polaris_dir }}/rsa_key"
          - "Public key location: {{ plf_polaris_dir }}/rsa_key.pub"
      tags:
        - rsa
        - verify

    - name: Generate credentials
      ansible.builtin.set_fact:
        bootstrap_client_id: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=8) }}"
        bootstrap_client_secret: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=12) }}"
        plf_jdbc_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=12) }}"
      tags:
        - bootstrap
        - k8s

    - name: Check if config files exist
      ansible.builtin.stat:
        path: "{{ item.file }}"
      loop: "{{ plf_config_files }}"
      register: config_file_stats
      tags:
        - bootstrap
        - k8s

    - name: Create config files if they don't exist
      ansible.builtin.template:
        src: "{{ item.0.template }}"
        dest: "{{ item.0.file }}"
        mode: "0600"
      when: not item.1.stat.exists
      loop: "{{ plf_config_files | zip(config_file_stats.results) | list }}"
      loop_control:
        label: "{{ item.0.file }}"
      tags:
        - bootstrap
        - k8s

    - name: Ensure features directory exists
      ansible.builtin.file:
        path: "{{ plf_features_dir }}"
        state: directory
        mode: "0755"
      tags:
        - bootstrap
        - k8s
